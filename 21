"""
Central configuration management for the healthcare document pipeline.

This module contains all configuration parameters for the pipeline including
network paths, processing settings, AI model parameters, and output specifications.
All pipeline behavior can be controlled by modifying settings in this file.
"""

from pathlib import Path
from datetime import date


class PipelineConfiguration:
    """
    Centralized configuration for the healthcare document processing pipeline.
    
    This class contains all configuration parameters needed for the complete
    pipeline operation. Modify these settings to adjust pipeline behavior
    for different environments and processing requirements.
    """
    
    def __init__(self):
        """
        Initialize pipeline configuration with default settings.
        
        Modify these values to match your specific environment and requirements.
        """
        
        # Network folder structure configuration
        # Update NETWORK_ROOT_PATH to point to your network document repository
        self.NETWORK_ROOT_PATH = r"\\Network\midp-sfs-007\midamreprc"
        self.AGREEMENTS_FOLDER = "AGREEMENTS-NON STANDARD"
        self.HOSPITAL_SUBFOLDER = "HOSPITAL"
        
        # Output directory structure
        # All pipeline outputs will be created under OUTPUT_DIRECTORY
        self.OUTPUT_DIRECTORY = "pipeline_outputs"
        self.CLASSIFICATION_OUTPUT_DIR = f"{self.OUTPUT_DIRECTORY}/classification_results"
        self.EXTRACTION_OUTPUT_DIR = f"{self.OUTPUT_DIRECTORY}/extraction_results"
        self.CONSOLIDATED_OUTPUT_DIR = f"{self.OUTPUT_DIRECTORY}/consolidated_results"
        self.LOGS_OUTPUT_DIR = f"{self.OUTPUT_DIRECTORY}/logs"
        
        # Processing performance and threading settings
        # Adjust CLASSIFICATION_THREADS based on system resources (1-20 recommended)
        self.CLASSIFICATION_THREADS = 5
        self.ENABLE_INCREMENTAL_PROCESSING = True
        self.MIN_FILE_MODIFICATION_DATE = date(2019, 1, 1)
        self.MIN_EFFECTIVE_YEAR = 2020
        
        # AI processing configuration for Google Gemini
        # These settings control image quality and model selection
        self.IMAGE_DPI = 150
        self.GEMINI_MODEL = 'gemini-1.5-flash'
        self.FIRST_PAGES_COUNT = 10
        self.LAST_PAGES_COUNT = 10
        
        # Google Cloud Platform settings
        # Update these to match your GCP project configuration
        self.GOOGLE_CLOUD_PROJECT = "anbc-hcb-dev"
        self.GOOGLE_CLOUD_LOCATION = "us-central1"
        
        # Pipeline behavior and error handling settings
        self.CONTINUE_ON_EXTRACTION_ERRORS = True
        self.SAVE_INDIVIDUAL_EXTRACTION_CSVS = True
        self.ENABLE_REAL_TIME_PROGRESS = True
        self.PROGRESS_UPDATE_INTERVAL_SECONDS = 30
        
        # State management for incremental processing
        self.STATE_FILE_PATH = f"{self.OUTPUT_DIRECTORY}/pipeline_state.json"
        self.ENABLE_STATE_PERSISTENCE = True
        
        # PDF processing and repair settings
        self.ENABLE_PDF_COMPLEXITY_ANALYSIS = True
        self.MAX_PDF_REPAIR_ATTEMPTS = 3
        self.SKIP_CORRUPTED_PAGES = True
        
        # US states for folder identification
        # Used to identify valid state folders in the network structure
        self.US_STATES = {
            'ALABAMA', 'ALASKA', 'ARIZONA', 'ARKANSAS', 'CALIFORNIA', 'COLORADO',
            'CONNECTICUT', 'DELAWARE', 'FLORIDA', 'GEORGIA', 'HAWAII', 'IDAHO',
            'ILLINOIS', 'INDIANA', 'IOWA', 'KANSAS', 'KENTUCKY', 'LOUISIANA',
            'MAINE', 'MARYLAND', 'MASSACHUSETTS', 'MICHIGAN', 'MINNESOTA',
            'MISSISSIPPI', 'MISSOURI', 'MONTANA', 'NEBRASKA', 'NEVADA',
            'NEW HAMPSHIRE', 'NEW JERSEY', 'NEW MEXICO', 'NEW YORK',
            'NORTH CAROLINA', 'NORTH DAKOTA', 'OHIO', 'OKLAHOMA', 'OREGON',
            'PENNSYLVANIA', 'RHODE ISLAND', 'SOUTH CAROLINA', 'SOUTH DAKOTA',
            'TENNESSEE', 'TEXAS', 'UTAH', 'VERMONT', 'VIRGINIA', 'WASHINGTON',
            'WEST VIRGINIA', 'WISCONSIN', 'WYOMING', 'PUERTO RICO', 'DISTRICT OF COLUMBIA'
        }
        
        # AI prompts for document classification
        # These are the exact working prompts - do not modify unless necessary
        self.HEALTHCARE_CONTRACT_PROMPT = (
            "Analyze the image. Is this a formal letter from Aetna about a "
            "'charge master increase' where they state 'we have received' a notification? "
            "Answer only YES or NO."
        )
        
        self.EFFECTIVE_DATE_PROMPT = (
            'This is an Aetna charge master increase letter. Find the EFFECTIVE DATE '
            'mentioned in the letter (phrases like "effective January 1, 2024" or '
            '"to become effective 1/1/2025"). Respond with just the date found, '
            'or "NOT_FOUND" if no effective date exists.'
        )
    
    def create_output_directories(self):
        """
        Create all required output directories if they don't exist.
        
        This method ensures that all output paths are available before
        pipeline execution begins. Called automatically during initialization.
        """
        directories_to_create = [
            self.OUTPUT_DIRECTORY,
            self.CLASSIFICATION_OUTPUT_DIR,
            self.EXTRACTION_OUTPUT_DIR,
            self.CONSOLIDATED_OUTPUT_DIR,
            self.LOGS_OUTPUT_DIR
        ]
        
        for directory_path in directories_to_create:
            Path(directory_path).mkdir(parents=True, exist_ok=True)
    
    def validate_configuration(self):
        """
        Validate that all configuration settings are valid and accessible.
        
        Performs comprehensive validation of network paths, folder structure,
        and configuration parameters to ensure pipeline can execute successfully.
        
        Returns:
            bool: True if configuration is valid, False otherwise
        """
        try:
            # Validate network path accessibility
            network_path = Path(self.NETWORK_ROOT_PATH)
            if not network_path.exists():
                return False
            
            # Validate agreements folder exists
            agreements_path = network_path / self.AGREEMENTS_FOLDER
            if not agreements_path.exists():
                return False
            
            # Validate thread count is reasonable
            if not (1 <= self.CLASSIFICATION_THREADS <= 20):
                return False
            
            # Validate date settings are sensible
            if self.MIN_EFFECTIVE_YEAR < 2000 or self.MIN_EFFECTIVE_YEAR > 2030:
                return False
            
            # Validate file modification date is not in the future
            if self.MIN_FILE_MODIFICATION_DATE > date.today():
                return False
            
            # Validate image DPI is reasonable
            if not (50 <= self.IMAGE_DPI <= 600):
                return False
            
            # Validate page counts are positive
            if self.FIRST_PAGES_COUNT < 1 or self.LAST_PAGES_COUNT < 1:
                return False
            
            return True
            
        except Exception:
            return False
    
    def get_configuration_summary(self):
        """
        Generate a summary of current configuration settings.
        
        Returns:
            dict: Dictionary containing key configuration parameters
        """
        return {
            'network_root_path': self.NETWORK_ROOT_PATH,
            'output_directory': self.OUTPUT_DIRECTORY,
            'classification_threads': self.CLASSIFICATION_THREADS,
            'min_file_date': self.MIN_FILE_MODIFICATION_DATE,
            'min_effective_year': self.MIN_EFFECTIVE_YEAR,
            'incremental_processing': self.ENABLE_INCREMENTAL_PROCESSING,
            'ai_model': self.GEMINI_MODEL,
            'image_dpi': self.IMAGE_DPI,
            'google_cloud_project': self.GOOGLE_CLOUD_PROJECT,
            'continue_on_errors': self.CONTINUE_ON_EXTRACTION_ERRORS
        }
