import os
import re
import json
from datetime import datetime
from PyPDF2 import PdfReader
from langchain.chat_models import AzureChatOpenAI
from langchain.schema import SystemMessage, HumanMessage

# üîê Azure OpenAI Configuration (REPLACE THESE)
AZURE_OPENAI_ENDPOINT = "https://<your-resource-name>.openai.azure.com/"
AZURE_OPENAI_KEY = "<your-azure-openai-key>"
AZURE_OPENAI_DEPLOYMENT = "<your-deployment-name>"
AZURE_OPENAI_VERSION = "2023-05-15"

# Initialize Azure OpenAI LLM
llm = AzureChatOpenAI(
    openai_api_base=AZURE_OPENAI_ENDPOINT,
    openai_api_version=AZURE_OPENAI_VERSION,
    deployment_name=AZURE_OPENAI_DEPLOYMENT,
    openai_api_key=AZURE_OPENAI_KEY,
    temperature=0
)

REQUIRED_FIELDS = [
    "Facility", "Charge Master Limit", "Charge Master Increase",
    "Rate Adjustment Date", "Business", "Service Category",
    "Current Rate", "Adjusted New Rate"
]

def extract_text(pdf_path):
    try:
        reader = PdfReader(pdf_path)
        return "\n".join(page.extract_text() or "" for page in reader.pages)
    except Exception as e:
        print(f"‚ùå Error reading PDF: {e}")
        return ""

def extract_effective_date(text):
    prompt = [
        SystemMessage(content="You are an expert in hospital contract analysis."),
        HumanMessage(content=f"""
Scan the following hospital contract text and extract the most recent date associated with either:
- "Effective Date"
- "Rate Adjustment Date"

Respond ONLY with JSON in this format:
{{ "date": "MM/DD/YYYY" }} if a valid date exists,
or {{ "date": null }} if no date found.

Text:
{text[:8000]}  # Limit to avoid token overload
""")
    ]
    try:
        response = llm(prompt).content.strip()
        print("üîç LLM raw date response:", response)

        try:
            parsed = json.loads(response)
        except:
            # Fallback: extract with regex if not valid JSON
            match = re.search(r'"date"\s*:\s*"(\d{1,2}/\d{1,2}/\d{4})"', response)
            if match:
                parsed = {"date": match.group(1)}
            else:
                print("‚ö†Ô∏è No valid date format in response.")
                return None

        if parsed.get("date"):
            return datetime.strptime(parsed["date"], "%m/%d/%Y")
        return None
    except Exception as e:
        print(f"‚ùå Date extraction error: {e}")
        return None

def check_required_fields(text):
    prompt = [
        SystemMessage(content="You are an expert in hospital contract analysis."),
        HumanMessage(content=f"""
Check if ALL of these fields are present somewhere in the contract:
- Facility
- Charge Master Limit
- Charge Master Increase
- Rate Adjustment Date
- Business
- Service Category
- Current Rate
- Adjusted New Rate

Respond ONLY with JSON: {{ "valid": true }} or {{ "valid": false }}

Text:
{text[:8000]}
""")
    ]
    try:
        response = llm(prompt).content.strip()
        print("‚úÖ LLM field check response:", response)
        parsed = json.loads(response)
        return parsed.get("valid", False)
    except Exception as e:
        print(f"‚ùå Field check error: {e}")
        return False

def is_valid_contract(text):
    date = extract_effective_date(text)
    print(f"üìÖ Extracted Effective Date: {date}")
    if not date or date < datetime(2024, 7, 1):
        print("‚õî Skipped: No valid or recent effective date")
        return False
    valid = check_required_fields(text)
    print("üìå Required fields present:", valid)
    return valid

# ---- MAIN: RUN SINGLE PDF ----
if __name__ == "__main__":
    pdf_path = "./test_contract.pdf"  # üîÅ Replace with your actual test PDF file
    text = extract_text(pdf_path)
    if not text:
        print("‚ùó No text extracted from PDF.")
    else:
        result = is_valid_contract(text)
        print(f"\n‚úÖ FINAL RESULT: {'VALID CONTRACT ‚úÖ' if result else 'SKIPPED ‚ùå'}")
