import os
import re
import json
from datetime import datetime
from PyPDF2 import PdfReader
from langchain.chat_models import AzureChatOpenAI
from langchain.schema import SystemMessage, HumanMessage

# üîê Azure OpenAI Configuration (REPLACE THESE)
AZURE_OPENAI_ENDPOINT = "https://<your-resource-name>.openai.azure.com/"
AZURE_OPENAI_KEY = "<your-azure-openai-key>"
AZURE_OPENAI_DEPLOYMENT = "<your-deployment-name>"
AZURE_OPENAI_VERSION = "2023-05-15"

# Initialize Azure OpenAI LLM
llm = AzureChatOpenAI(
    openai_api_base=AZURE_OPENAI_ENDPOINT,
    openai_api_version=AZURE_OPENAI_VERSION,
    deployment_name=AZURE_OPENAI_DEPLOYMENT,
    openai_api_key=AZURE_OPENAI_KEY,
    temperature=0
)

REQUIRED_FIELDS = [
    "Facility", "Charge Master Limit", "Charge Master Increase",
    "Rate Adjustment Date", "Business", "Service Category",
    "Current Rate", "Adjusted New Rate"
]

def extract_text(pdf_path):
    try:
        reader = PdfReader(pdf_path)
        return "\n".join(page.extract_text() or "" for page in reader.pages)
    except Exception as e:
        print(f"Error reading PDF: {e}")
        return ""

def extract_relevant_sections(text, keywords):
    lines = text.splitlines()
    return "\n".join([line.strip() for line in lines if any(k.lower() in line.lower() for k in keywords)])

def extract_effective_date(text):
    relevant_text = extract_relevant_sections(text, ["Rate Adjustment Date", "Effective Date"])
    if not relevant_text.strip():
        return None

    prompt = [
        SystemMessage(content="You are an expert in hospital contract analysis."),
        HumanMessage(content=f"""
Extract the latest date value found from either 'Rate Adjustment Date' or 'Effective Date'.
Return JSON in this format:
{{ "date": "MM/DD/YYYY" }} if a date is found,
or {{ "date": null }} if no date found.

Text:
{relevant_text}
""")
    ]
    try:
        response = llm(prompt).content.strip()
        parsed = json.loads(response)
        if parsed["date"]:
            return datetime.strptime(parsed["date"], "%m/%d/%Y")
        return None
    except Exception as e:
        print(f"Date extraction error: {e}")
        return None

def check_required_fields(text):
    relevant_text = extract_relevant_sections(text, REQUIRED_FIELDS)
    if not relevant_text.strip():
        return False

    prompt = [
        SystemMessage(content="You are an expert in hospital contract analysis."),
        HumanMessage(content=f"""
Check if ALL the following fields are mentioned in the text below:
- Facility
- Charge Master Limit
- Charge Master Increase
- Rate Adjustment Date
- Business
- Service Category
- Current Rate
- Adjusted New Rate

Respond ONLY with JSON: {{ "valid": true }} or {{ "valid": false }}

Text:
{relevant_text}
""")
    ]
    try:
        response = llm(prompt).content.strip()
        parsed = json.loads(response)
        return parsed.get("valid", False)
    except Exception as e:
        print(f"Field check error: {e}")
        return False

def is_valid_contract(text):
    date = extract_effective_date(text)
    print(f"Extracted Effective Date: {date}")
    if not date or date < datetime(2024, 7, 1):
        print("Date check failed.")
        return False
    valid = check_required_fields(text)
    print("Required fields present:", valid)
    return valid

# ---- RUN SINGLE PDF ----
if __name__ == "__main__":
    pdf_path = "./test_contract.pdf"  # üîÑ Replace with your actual test PDF path
    text = extract_text(pdf_path)
    if not text:
        print("No text extracted.")
    else:
        is_valid = is_valid_contract(text)
        print(f"\nResult: {'VALID CONTRACT' if is_valid else 'SKIPPED / INVALID'}")
