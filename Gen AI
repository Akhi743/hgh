import os
import re
import pdfplumber
import pandas as pd
import google.auth
from google.auth.transport.requests import Request
from openai import OpenAI
import instructor
from contextgem import Document, DocumentLLM, JsonObjectConcept
from pydantic import BaseModel, Field, field_validator, model_validator
from typing import Optional

# === CONFIGURATION ===
BASE_URL = "https://YOUR_RESOURCE_NAME.openai.azure.com/"            # Replace with your Azure OpenAI base URL
MODEL_NAME = "YOUR_MODEL_DEPLOYMENT_NAME"                            # Replace with your deployment/model name
PDF_PATH = "your_contract.pdf"                                       # Replace with your PDF file path
OUTPUT_EXCEL = "contract_rates_output.xlsx"                          # Desired output Excel file name

# === AUTHENTICATION ===
# Use GCP Application Default Credentials to fetch an identity token
creds, _ = google.auth.default()
req = Request()
creds.refresh(req)

# Create an OpenAI client wrapped by instructor for structured JSON output
CLIENT = instructor.from_openai(
    OpenAI(base_url=BASE_URL, api_key=creds.token),
    mode=instructor.Mode.JSON
)

# === Pydantic Schema with Validation and Fallback ===
class HospitalRateEntry(BaseModel):
    hospital: str = Field(..., description="Facility name")
    lob: str = Field(..., description="Line of business (e.g., Commercial)")
    place_of_service: str = Field(..., description="IP or OP")
    service_category: str
    billing_code_type: str       # DRG, Revenue, HCPC
    billing_code: str
    rate: str
    negotiated_type: str         # Per Diem / Per Unit / Percentage
    additional_information: Optional[str] = ""
    effective_date: str          # MM/DD/YYYY

    @field_validator("rate")
    def validate_rate(cls, v):
        if not re.match(r"^\$?\d{1,3}(,\d{3})*(\.\d{2})?$|^\d{1,3}%$", v.strip()):
            raise ValueError(f"Invalid rate format: {v}")
        return v

    @field_validator("billing_code")
    def validate_billing_code(cls, v):
        if not re.match(r"^[A-Za-z0-9\-, ]+$", v.strip()):
            raise ValueError(f"Invalid billing code format: {v}")
        return v.strip()

    @model_validator(mode="after")
    def fill_missing_fields(self):
        for f in self.__fields__:
            val = getattr(self, f)
            if val is None or (isinstance(val, str) and not val.strip()):
                setattr(self, f, "N/A")
        return self

# === Step 1: Extract Raw Text from PDF ===
with pdfplumber.open(PDF_PATH) as pdf:
    contract_text = "\n".join(
        page.extract_text() for page in pdf.pages if page.extract_text()
    )

# === Step 2: Build Document and Add Concept ===
doc = Document(raw_text=contract_text)
doc.add_concepts([
    JsonObjectConcept(
        name="HospitalRateEntry",
        description="Extract each billing entry from the hospital contract PDF. One row per billing code.",
        schema=HospitalRateEntry,
        many=True
    )
])

# === Step 3: Extract Structured Data with LLM ===
llm = DocumentLLM(client=CLIENT, model=MODEL_NAME)
doc = llm.extract_all(doc)
entries = doc.get_concept_by_name("HospitalRateEntry").extracted_items

# === Step 4: Expand Billing Code Ranges into Individual Rows ===
def expand_billing_codes(entry):
    codes = re.split(r',\s*', entry.billing_code)
    expanded = []
    for code in codes:
        if '-' in code:
            nums = re.findall(r'\d+', code)
            if len(nums) == 2:
                start, end = map(int, nums)
                for val in range(start, end + 1):
                    new = entry.model_copy()
                    new.billing_code = str(val)
                    expanded.append(new)
            else:
                expanded.append(entry)
        else:
            new = entry.model_copy()
            new.billing_code = code.strip()
            expanded.append(new)
    return expanded

final_entries = []
for e in entries:
    final_entries.extend(expand_billing_codes(e))

# === Step 5: Convert to DataFrame, Reorder, Fill Missing, and Export ===
df = pd.DataFrame([e.model_dump() for e in final_entries])
df = df[[
    "hospital", "lob", "place_of_service", "service_category",
    "billing_code_type", "billing_code", "rate", "negotiated_type",
    "additional_information", "effective_date"
]]
df.fillna("N/A", inplace=True)
df.to_excel(OUTPUT_EXCEL, index=False)

# === Display Results ===
df.head()
