import os
import PyPDF2
import pandas as pd
import re
from datetime import datetime

try:
    from openai import OpenAI
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False

class RateScheduleFinder:
    def __init__(self, openai_api_key=None):
        self.use_openai = openai_api_key and OPENAI_AVAILABLE
        self.client = None
        
        if self.use_openai:
            try:
                self.client = OpenAI(api_key=openai_api_key)
                print("Using OpenAI GPT")
            except Exception as e:
                print(f"OpenAI setup failed: {e}")
                self.use_openai = False
        else:
            print("Using rule-based analysis")
    
    def extract_text(self, pdf_path):
        try:
            with open(pdf_path, 'rb') as file:
                pdf = PyPDF2.PdfReader(file)
                text_parts = []
                
                for page in pdf.pages:
                    page_text = page.extract_text()
                    text_parts.append(page_text)
                    
                    if len(''.join(text_parts)) > 5000:
                        break
                
                return ''.join(text_parts)[:5000]
        except:
            return ""
    
    def extract_rate_date(self, text):
        date_patterns = [
            r'effective[:\s]+(\d{1,2}[\/\-]\d{1,2}[\/\-]\d{4})',
            r'rate adjustment date[:\s]+(\d{1,2}[\/\-]\d{1,2}[\/\-]\d{4})',
            r'adjustment date[:\s]+(\d{1,2}[\/\-]\d{1,2}[\/\-]\d{4})',
            r'effective date[:\s]+(\d{1,2}[\/\-]\d{1,2}[\/\-]\d{4})',
            r'(\d{1,2}[\/\-]\d{1,2}[\/\-]\d{4})',
        ]
        
        text_lower = text.lower()
        
        for pattern in date_patterns:
            matches = re.findall(pattern, text_lower)
            for match in matches:
                try:
                    for date_format in ['%m/%d/%Y', '%m-%d-%Y', '%d/%m/%Y', '%d-%m-%Y']:
                        try:
                            date_obj = datetime.strptime(match, date_format)
                            return date_obj, match
                        except ValueError:
                            continue
                except:
                    continue
        
        return None, None
    
    def is_date_after_cutoff(self, date_obj):
        cutoff_date = datetime(2024, 7, 1)
        return date_obj >= cutoff_date if date_obj else False
    
    def analyze_with_openai(self, text):
        try:
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {
                        "role": "system", 
                        "content": "You are an expert at analyzing healthcare documents. Identify rate schedule documents with pricing tables."
                    },
                    {
                        "role": "user", 
                        "content": f"""Is this a healthcare rate schedule document?

Look for: facility name, charge master, current rates, adjusted rates, service categories.

Document text:
{text[:1800]}

Answer format:
YES or NO
Confidence: 0-100"""
                    }
                ],
                max_tokens=100,
                temperature=0
            )
            
            result = response.choices[0].message.content.lower()
            is_rate = "yes" in result
            
            confidence = 80 if is_rate else 30
            numbers = re.findall(r'\d+', result)
            if numbers:
                confidence = min(int(numbers[0]), 100)
            
            return is_rate, confidence
            
        except Exception as e:
            if "gpt-4o-mini" in str(e).lower():
                print(f"GPT-4o-mini not available, trying GPT-3.5")
                return self.analyze_with_gpt35(text)
            else:
                print(f"OpenAI error: {e}")
                return self.analyze_with_rules(text)
    
    def analyze_with_gpt35(self, text):
        try:
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{
                    "role": "user", 
                    "content": f"Is this a healthcare rate schedule? Answer YES/NO and confidence 0-100.\n\nText: {text[:1500]}"
                }],
                max_tokens=50,
                temperature=0
            )
            
            result = response.choices[0].message.content.lower()
            is_rate = "yes" in result
            confidence = 70 if is_rate else 30
            
            numbers = re.findall(r'\d+', result)
            if numbers:
                confidence = min(int(numbers[0]), 100)
            
            return is_rate, confidence
        except Exception as e:
            print(f"GPT-3.5 error: {e}")
            return self.analyze_with_rules(text)
    
    def analyze_with_rules(self, text):
        if not text:
            return False, 0
        
        text_lower = text.lower()
        score = 0
        
        if "charge master" in text_lower:
            score += 40
        if "current rate" in text_lower:
            score += 30
        if "adjusted rate" in text_lower or "new rate" in text_lower:
            score += 25
        if "facility" in text_lower or "hospital" in text_lower:
            score += 15
        if "service category" in text_lower:
            score += 10
        
        return score >= 70, score
    
    def analyze_document(self, pdf_path):
        text = self.extract_text(pdf_path)
        
        if self.use_openai:
            is_rate, confidence = self.analyze_with_openai(text)
        else:
            is_rate, confidence = self.analyze_with_rules(text)
        
        if not is_rate:
            return False, confidence, None, "Not a rate schedule"
        
        date_obj, date_str = self.extract_rate_date(text)
        
        if date_obj is None:
            return True, confidence, "Date not found", "Rate schedule but no clear date"
        
        if self.is_date_after_cutoff(date_obj):
            return True, confidence, date_str, f"Valid date: {date_str}"
        else:
            return False, confidence, date_str, f"Date too old: {date_str}"
    
    def scan_folder(self, folder_path):
        print(f"Scanning: {folder_path}")
        
        if not os.path.exists(folder_path):
            print(f"Error: Cannot access path: {folder_path}")
            return []
        
        rate_schedules = []
        
        pdf_files = []
        for root, dirs, files in os.walk(folder_path):
            for file in files:
                if file.lower().endswith('.pdf'):
                    pdf_files.append((root, file))
        
        print(f"Found {len(pdf_files)} PDFs to check")
        
        for i, (root, file) in enumerate(pdf_files, 1):
            file_path = os.path.join(root, file)
            print(f"[{i}/{len(pdf_files)}] {file}")
            
            try:
                is_rate, confidence, date_found, reason = self.analyze_document(file_path)
                
                if is_rate:
                    rate_schedules.append({
                        'filename': file,
                        'date_found': date_found,
                        'confidence': confidence
                    })
                    print(f"  VALID ({confidence}%) - Date: {date_found}")
                else:
                    print(f"  REJECTED - {reason}")
            
            except Exception as e:
                print(f"  ERROR: {e}")
        
        return rate_schedules
    
    def save_results(self, rate_schedules):
        if not rate_schedules:
            print("No valid rate schedules found")
            print("No documents found with rate adjustment dates after 07/01/2024")
            return
        
        print(f"Found {len(rate_schedules)} valid rate schedule documents:")
        
        rate_schedules.sort(key=lambda x: x['confidence'], reverse=True)
        
        simple_data = []
        for i, doc in enumerate(rate_schedules, 1):
            simple_data.append({
                'filename': doc['filename'],
                'date_found': doc['date_found'],
                'confidence': doc['confidence']
            })
            print(f"{i}. {doc['filename']} (Date: {doc['date_found']})")
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
        output_file = os.path.join(desktop_path, f'valid_rate_schedules_{timestamp}.csv')
        
        df = pd.DataFrame(simple_data)
        df.to_csv(output_file, index=False)
        
        print(f"Saved to Desktop: valid_rate_schedules_{timestamp}.csv")
        print(f"Contains: filename, date_found, confidence")

def main():
    OPENAI_API_KEY = input("Enter your OpenAI API key (or press Enter for rules only): ").strip()
    NETWORK_PATH = r"\\midp-sfs-007\midamreprc\AGREEMENTS-NON STANDARD"
    
    if not OPENAI_API_KEY or OPENAI_API_KEY.lower() == 'none':
        OPENAI_API_KEY = None
        print("Using rules mode")
    
    finder = RateScheduleFinder(OPENAI_API_KEY)
    rate_schedules = finder.scan_folder(NETWORK_PATH)
    finder.save_results(rate_schedules)
    
    print("Scan complete")

if __name__ == "__main__":
    main()
