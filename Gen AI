import os, re, json, fitz, pytesseract
from pydantic import BaseModel, Field, field_validator, model_validator
from typing import Optional, List
from openai import OpenAI
import instructor

# -----------------------------------------------------------------------------
# 1) AUTHENTICATE EXACTLY LIKE form_extractor.py (no hard‐coded key)
# -----------------------------------------------------------------------------
import google.auth
from google.auth.transport.requests import Request

creds, _ = google.auth.default()
creds.refresh(Request())
CLIENT = instructor.from_openai(
    OpenAI(
        base_url="https://YOUR‐AZURE‐RESOURCE.openai.azure.com/",
        api_key=creds.token
    ),
    mode=instructor.Mode.JSON
)

MODEL_NAME = "your‐deployment‐name"  # must match Azure deployment

# -----------------------------------------------------------------------------
# 2) YOUR Pydantic schema (same as before)
# -----------------------------------------------------------------------------
class HospitalRateEntry(BaseModel):
    hospital: str
    lob: str
    place_of_service: str
    service_category: str
    billing_code_type: str
    billing_code: str
    rate: str
    negotiated_type: str
    additional_information: Optional[str] = ""
    effective_date: str

    @field_validator("rate")
    def validate_rate(cls, v):
        if not re.match(r"^\$?\d{1,3}(,\d{3})*(\.\d{2})?$|^\d{1,3}%$", v.strip()):
            raise ValueError(f"Bad rate: {v}")
        return v.strip()

    @model_validator(mode="after")
    def fill_missing(cls, s):
        for f in s.__fields__:
            val = getattr(s, f)
            if not val or (isinstance(val, str) and not val.strip()):
                setattr(s, f, "N/A")
        return s

# -----------------------------------------------------------------------------
# 3) PROMPT builder
# -----------------------------------------------------------------------------
def build_prompt(text: str) -> str:
    return f"""
Extract every billing entry from this hospital contract.  Return a JSON array, where each element has:
- hospital
- lob
- place_of_service
- service_category
- billing_code_type
- billing_code
- rate
- negotiated_type
- additional_information
- effective_date

Text:
\"\"\"
{text}
\"\"\"
"""

# -----------------------------------------------------------------------------
# 4) TEXT EXTRACTION (OCR fallback via PyMuPDF + Tesseract)
# -----------------------------------------------------------------------------
def extract_text(pdf_path: str) -> str:
    import fitz, pytesseract
    from PIL import Image

    doc = fitz.open(pdf_path)
    pages = []
    for page in doc:
        pix = page.get_pixmap(dpi=200)
        img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)
        pages.append(pytesseract.image_to_string(img))
    return "\n".join(pages)

# -----------------------------------------------------------------------------
# 5) LLM extraction function (the “long way”)
# -----------------------------------------------------------------------------
def extract_with_instructor(text: str) -> List[HospitalRateEntry]:
    prompt = build_prompt(text)
    messages = [
        {"role": "system", "content": "You are a JSON extraction engine."},
        {"role": "user",   "content": prompt}
    ]
    res = CLIENT.chat.completions.create(
        model=MODEL_NAME,
        messages=messages,
        temperature=0,
        max_tokens=5000
    )
    payload = res.choices[0].message.content
    data = json.loads(payload)
    return [HospitalRateEntry(**item) for item in data]

# -----------------------------------------------------------------------------
# 6) Put it all together
# -----------------------------------------------------------------------------
if __name__ == "__main__":
    pdf_path = "your_contract.pdf"
    text = extract_text(pdf_path)
    print("OCR →", len(text), "chars")

    entries = extract_with_instructor(text)
    # (Optionally split ranges here, convert to DataFrame, export, etc.)
    for idx, e in enumerate(entries, 1):
        print(f"{idx:2d}.", e.dict())
